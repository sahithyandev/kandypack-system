name: CI/CD Pipeline

on:
  push:
    branches: ["main", "Deploy-Workflow"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Job 1: Lint and Code Quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies - Backend
        working-directory: ./backend
        run: bun install --frozen-lockfile

      - name: Install dependencies - Frontend
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Run Biome lint
        run: bun run lint
        continue-on-error: true

      - name: Run Biome format check
        run: bun run format:check
        continue-on-error: true

  # Job 2: Build Backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ./backend
        run: bun install --frozen-lockfile

      - name: Type check
        working-directory: ./backend
        run: bun run type-check || echo "No type-check script found"
        continue-on-error: true

      - name: Build Docker image
        working-directory: ./backend
        run: docker build -t kandypack-backend:test .

      - name: Test Docker image
        run: |
          docker run --rm kandypack-backend:test bun --version
          echo "Backend Docker image built successfully"

  # Job 3: Build Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Type check
        working-directory: ./frontend
        run: bun run type-check || npx tsc --noEmit
        continue-on-error: true

      - name: Build Next.js app
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:2000
        run: bun run build

      - name: Build Docker image
        working-directory: ./frontend
        run: docker build -t kandypack-frontend:test .

      - name: Test Docker image
        run: |
          docker run --rm kandypack-frontend:test node --version
          echo "Frontend Docker image built successfully"

  # Job 4: Database Validation
  validate-db:
    name: Validate Database Scripts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start PostgreSQL
        run: |
          docker run -d \
            --name postgres-test \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=kandypack \
            -v ${{ github.workspace }}/db/init-scripts:/docker-entrypoint-initdb.d \
            -p 5432:5432 \
            postgres:17

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if docker exec postgres-test pg_isready -U postgres -d kandypack; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done
          echo "PostgreSQL failed to start"
          exit 1

      - name: Verify database schema
        run: |
          docker exec postgres-test psql -U postgres -d kandypack -c "\dt"
          docker exec postgres-test psql -U postgres -d kandypack -c "SELECT COUNT(*) FROM \"User\";"
          docker exec postgres-test psql -U postgres -d kandypack -c "SELECT COUNT(*) FROM \"Product\";"
          echo "Database initialization successful"

      - name: Cleanup
        if: always()
        run: docker rm -f postgres-test || true

  # Job 5: Deploy to VPS (only on main/Deploy-Workflow branch)
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, validate-db]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/Deploy-Workflow')
    
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
            set -e
            
            echo "Starting deployment..."
            
            # Navigate to deployment directory
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Check if repo exists, clone or pull accordingly
            if [ -d ".git" ]; then
              echo "Repository exists, pulling latest changes..."
              git fetch origin
              git reset --hard origin/${{ github.ref_name }}
              git clean -fd
            else
              echo "Cloning repository..."
              git clone -b ${{ github.ref_name }} https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git .
            fi
            
            # Create .env file from secrets if it doesn't exist
            if [ ! -f ".env" ]; then
              echo "Creating .env file..."
              cat > .env << 'ENVEOF'
          ${{ secrets.ENV_FILE }}
          ENVEOF
            fi
            
            # Stop existing containers
            echo "Stopping existing containers..."
            docker compose -f docker-compose.prod.yml down || true
            
            # Remove old images to save space (optional)
            echo "Cleaning up old images..."
            docker image prune -f || true
            
            # Build and start containers
            echo "Building Docker images..."
            docker compose -f docker-compose.prod.yml build --no-cache
            
            echo "Starting containers..."
            docker compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            echo "Waiting for services to be ready..."
            sleep 15
            
            # Show running containers
            echo "Deployment complete! Running containers:"
            docker compose -f docker-compose.prod.yml ps
            
            # Show logs for verification
            echo "Recent logs:"
            docker compose -f docker-compose.prod.yml logs --tail=50
          EOF

      - name: Verify Deployment
        run: |
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Check if containers are running
            if docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "Deployment successful!"
              exit 0
            else
              echo "Deployment failed - containers not running"
              docker compose -f docker-compose.prod.yml logs
              exit 1
            fi
          EOF

      - name: Health Check
        run: |
          echo "Performing health checks..."
          max_attempts=10
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://${{ secrets.HOST }}:2000/health > /dev/null 2>&1; then
              echo "Backend health check passed!"
              exit 0
            fi
            attempt=$((attempt + 1))
            echo "Health check attempt $attempt/$max_attempts failed, retrying..."
            sleep 5
          done
          
          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Deployment Summary
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "================================"
            echo "Deployment to VPS completed successfully!"
            echo "Frontend: http://${{ secrets.HOST }}:3000"
            echo "Backend: http://${{ secrets.HOST }}:2000"
            echo "API Docs: http://${{ secrets.HOST }}:2000/swagger"
            echo "================================"
          else
            echo "Deployment to VPS failed!"
            echo "Check the logs above for details"
          fi
