/**
 * Authentication Service for Kandypack Customer Portal
 * 
 * Provides mock authentication functionality using localStorage for demonstration.
 * In production, this would integrate with a proper authentication API.
 */

import { mockCustomer, type Customer } from './mock-data';

/**
 * Authenticated user interface representing logged-in user data
 */
export interface AuthUser {
  /** Unique user identifier */
  id: number;
  /** User's display name */
  name: string;
  /** User's email address */
  email: string;
}

/**
 * Mock Authentication Service
 * 
 * Handles user login, registration, logout, and session management using localStorage.
 * This is a simplified implementation for demo purposes.
 */
export class AuthService {
  /** localStorage key for storing user session data */
  private static readonly STORAGE_KEY = 'kandypack_auth_user';

  /**
   * Authenticate user with username and password
   * 
   * @param username - User's username (accepts any non-empty string for demo)
   * @param password - User's password (accepts any non-empty string for demo)
   * @returns Authentication result with user data or error message
   */
  static login(username: string, password: string): { success: boolean; user?: AuthUser; error?: string } {
    // Mock authentication - accept any username/password for demo purposes
    if (username && password) {
      const user: AuthUser = {
        id: mockCustomer.id,
        name: mockCustomer.name,
        email: mockCustomer.email,
      };
      
      // Store user session in localStorage
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(user));
      return { success: true, user };
    }
    
    return { success: false, error: 'Invalid credentials' };
  }

  /**
   * Register new user account
   * 
   * @param name - User's full name
   * @param email - User's email address  
   * @param username - Desired username
   * @param password - User's password
   * @returns Registration result with user data or error message
   */
  static register(name: string, email: string, username: string, password: string): { success: boolean; user?: AuthUser; error?: string } {
    // Mock registration - accept any valid data for demo purposes
    if (name && email && username && password) {
      const user: AuthUser = {
        id: 1, // In production, this would be generated by the backend
        name,
        email,
      };
      
      // Store user session in localStorage
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(user));
      return { success: true, user };
    }
    
    return { success: false, error: 'All fields are required' };
  }

  /**
   * Log out current user by clearing session data
   */
  static logout(): void {
    localStorage.removeItem(this.STORAGE_KEY);
  }

  /**
   * Get currently authenticated user from session
   * 
   * @returns Current user object or null if not authenticated
   */
  static getCurrentUser(): AuthUser | null {
    try {
      const userData = localStorage.getItem(this.STORAGE_KEY);
      return userData ? JSON.parse(userData) : null;
    } catch {
      // Handle corrupted session data gracefully
      return null;
    }
  }

  /**
   * Check if user is currently authenticated
   * 
   * @returns true if user is logged in, false otherwise
   */
  static isAuthenticated(): boolean {
    return this.getCurrentUser() !== null;
  }
}